custom modifications to openHFDIB library by Federico Municchi

Changelog:
20201130
 Martin
 - moved everything connected to addition of new bodies to class addModels
   and subClasses
 - created folder "algorithms" in the code sourceDir (to be filled)
 -  Current TODO:
 1. Marťas: 
 -> implementation of adhesion forces
 -> study on C++ templating, class inheritance and think on code division
 -> think on what should go into "algorithms" directory
 2. Ondra
 -> WORK YOUR RANDOM PARTICLE CODES INTO PROVIDED TEMPLATE
 -> look into implementation of contact forces, correct the bug there
 -> clean up implementation of contact forces, move this into separate
    file and improve structure of HFDIBDEMDict
 3. Martin:
 -> improve code architecture
 -> create a clean version to upload with the article
 -> calling of addModels, is this really a suitable way?
 Note: think on initialization with given volumetric ratio using a single
       STL
 
Note: algorithms directory
-> it would be great to move such algorithms in a specific
   directory/class to be used across the code, whenever
   needed
-> this class might be a bit messy but it would make a lot
   of other code clearer
e.g.
1. getBBoxCellsByOctree
-> used in immersedBody::createImmersedBodyConvex
-> should be used in addModel*::canAddBody
2. body rotation and translation
-> used in immersedBody::movedImmersedBody
-> should be used in addModelRepeatRandomPosition::addBody
 

20201123
 -  moved everything into openHFDIBDEM library (we are to far away from
    the original implementation by Municchi
 -  Current TODO:
 1. Marťas: 
 -> implementation of adhesion forces
 -> study on C++ templating and think on code division
 2. Ondra
 -> provide your codes on random particle addition
 -> look into implementation of contact forces, correct the bug there
 -> clean up implementation of contact forces, move this into separate
    file and improve structure of HFDIBDEMDict
 3. Martin:
 -> improve code architecture
 -> create a clean version to upload with the article


20191019
 -  implemented different body operations.
    1. staticBody
        * fixed position, no rotation
    2. prescribedTransBody
        * free rotation, prescribed body linear velocity
    3. prescribedRotBody
        * prescribed rotation, free body linear velocity
    4. prescribedTransRotBody
        * prescribed rotation and body linear velocity
    5. prescribedTransFixedAxisRotBody
        * prescribed body linear velocity, free body rotation around fixed
          axis
    6. fullyCoupledBody
        * free rotation, free body linear velocity
        
20190926
 -  V13 released, merged with Martas's time integration
 -  attempts on correcting the body rotation (see articles)
 -  implementation of torque changes due to body forces (shit happens there)

20190925
 -  code clean-up. the algorithms are the same as in version 12c, but
    the methods were cleaned-up to clarify the code structure.
Note: there is still quite a few problems with body-body contacts
    1. momentum preservation
    2. immersed body courant number based on body relative velocity
    3. implementation of other than normal forces (e.g. friction)
 
20190102
 -  lets try to remove the assumptions of hexahedral cells
    (make it work with arbitrary meshes)
